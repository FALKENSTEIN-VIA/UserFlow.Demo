Entwickler-Merkzettel â€“ Stand: 2025-05-03
Projekt: UserFlowAPI â€“ ChangeStreams via SignalR (nÃ¤chster Schritt)
âœ… Aktueller Stand der API

    Framework: .NET 8, ASP.NET Core WebAPI

    Datenbank: PostgreSQL via EF Core

    Multi-Tenancy: VollstÃ¤ndig umgesetzt Ã¼ber CompanyId in allen EntitÃ¤ten

    Rollen & Zugriff: GlobalAdmin, Admin, Manager, User

    Authentication: JWT + RefreshToken, Identity-basierend

    DTOs & Mappings: VollstÃ¤ndig Ã¼ber DTOMapper, inkl. LINQ-Expressions

    Soft Delete: Global aktiviert Ã¼ber BaseEntity.IsDeleted

    Audit-Trail: CreatedAt, UpdatedAt, CreatedBy, UpdatedBy

    Serilog Logging: Inklusive Hoststart, Migrationsstatus, Seeding

    Seeder: Erstellt 10 Firmen mit vollstÃ¤ndiger Struktur (Admin, Manager, User, Projekte, Screens, Actions, Notes)

    Swagger: Integriert mit API-Dokumentation

    Admin-Endpoints: Dashboard mit Statistiken (User- und Projektanzahl, neueste Benutzer)

    Mehrsprachigkeit: Geplant via .resx, vorbereitet in multilingual-api-support.md

    Export/Import-Funktion: Als Feature geplant, siehe feature-export-import.md

ðŸ“Œ NÃ¤chster Entwicklungsschritt: SignalR ChangeStreams

Ziel:
Live-Aktualisierung von UI-Clients (z.â€¯B. WPF oder MAUI) bei Ã„nderungen an Projekten, Screens, Aktionen oder Notizen durch andere Benutzer.

Geplante Umsetzung:

    Einrichtung eines SignalR-Hubs

    Broadcasting bei Create/Update/Delete in relevanten Controllern

    Authentifizierte Verbindung mit Zugriffskontrolle Ã¼ber CompanyId

    Strukturierung der Payloads: z.â€¯B. ActionType = Created, EntityType = Project, Data = ...

    SpÃ¤tere Erweiterung: Ã„nderungsverlauf oder delta-basierte Updates